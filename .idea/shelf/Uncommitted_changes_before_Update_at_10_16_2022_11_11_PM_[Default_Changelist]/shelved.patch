Index: app/src/main/java/com/xiaobo/smartcalendar/activity/AddEventActivity/AddEventActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xiaobo.smartcalendar.activity.AddEventActivity;\r\n\r\nimport static com.xiaobo.smartcalendar.Public.PublicVaribale.ENDPOINT_LOCATION;\r\nimport static com.xiaobo.smartcalendar.Public.PublicVaribale.POISEARCHACTIVITY_REQUEST;\r\nimport static com.xiaobo.smartcalendar.Public.PublicVaribale.POISEARCHACTIVITY_RESULT;\r\nimport static com.xiaobo.smartcalendar.Public.PublicVaribale.STARTPOINT_LOTATION;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.app.TimePickerDialog;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ListView;\r\nimport android.widget.TimePicker;\r\n\r\nimport com.amap.api.services.core.LatLonPoint;\r\nimport com.bigkoo.pickerview.builder.TimePickerBuilder;\r\nimport com.bigkoo.pickerview.listener.OnTimeSelectListener;\r\nimport com.bigkoo.pickerview.view.TimePickerView;\r\nimport com.xiaobo.smartcalendar.Model.Contradiction.MyTemporalInconsistency;\r\nimport com.xiaobo.smartcalendar.Model.Contradiction.MyTemporalInconsistencyManager;\r\nimport com.xiaobo.smartcalendar.Model.Events.ActivityTitle;\r\nimport com.xiaobo.smartcalendar.Model.Events.DateOfEvent;\r\nimport com.xiaobo.smartcalendar.Model.Events.Location;\r\nimport com.xiaobo.smartcalendar.Model.Events.MyEvent;\r\nimport com.xiaobo.smartcalendar.Model.Events.MyEventManager;\r\nimport com.xiaobo.smartcalendar.Model.Events.Participant;\r\nimport com.xiaobo.smartcalendar.Model.Events.Periodicity;\r\nimport com.xiaobo.smartcalendar.Model.Events.TargetLocation;\r\nimport com.xiaobo.smartcalendar.Model.Events.TempEventManager;\r\nimport com.xiaobo.smartcalendar.Model.Events.TypeOfEvent;\r\nimport com.xiaobo.smartcalendar.Public.CurrentLocation;\r\nimport com.xiaobo.smartcalendar.Public.PublicVaribale;\r\nimport com.xiaobo.smartcalendar.R;\r\nimport com.xiaobo.smartcalendar.Service.BackgroundService.ReceivedBroadcastService;\r\nimport com.xiaobo.smartcalendar.Service.CalRoute.CalRouteIntentService;\r\nimport com.xiaobo.smartcalendar.Service.HttpRequest.HttpRequestIntentService;\r\nimport com.xiaobo.smartcalendar.Service.Location.LocationService;\r\nimport com.xiaobo.smartcalendar.activity.PoiSearchWithoutMap.PoiInfoModel;\r\nimport com.xiaobo.smartcalendar.activity.PoiSearchWithoutMap.PoiSearchWithoutMapActivity;\r\nimport com.xiaobo.smartcalendar.activity.SearchLocationActivity.SearchLocationActivity;\r\n\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\n\r\npublic class AddEventActivity extends AppCompatActivity implements AdapterView.OnItemClickListener {\r\n\r\n    private ListView itemListView;\r\n    private AddEventAdapter mAddEventAdapter;\r\n    private LinkedList<EventItem> mData = null;\r\n\r\n    private Date mDate;\r\n    private TempEventManager.TempEvent tempEvent;\r\n    private LatLonPoint mTargetPoint = ENDPOINT_LOCATION;\r\n    private String mTargetName = \"新城吾悦广场\";\r\n    private LatLonPoint mStartPoint = STARTPOINT_LOTATION;\r\n    TargetLocation perTargetLocation = new TargetLocation();\r\n\r\n    private MyReceiver myReceiver = null;\r\n    // 是否已经发送计算通勤时间标识\r\n    private boolean sendCalRoute = false;\r\n\r\n    private com.haibin.calendarview.Calendar mCalendar;\r\n\r\n    private ActivityType activityType = ActivityType.AddEventActivity;\r\n\r\n    enum ActivityType {\r\n        AddEventActivity,\r\n        ShowEventActivity\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_add_event);\r\n\r\n        mDate = new Date(new Date().getTime() + (5 * 60 * 60 * 1000));\r\n        // 数据初始化\r\n        tempEvent = TempEventManager.getInstance().createEvent();\r\n\r\n        // 接收数据\r\n        Intent i = getIntent();\r\n\r\n        mCalendar = (com.haibin.calendarview.Calendar)i.getSerializableExtra(\"selectedDate\");\r\n\r\n        try {\r\n            UUID eventID = (UUID)i.getSerializableExtra(\"eventID\");\r\n            if (eventID != null) {\r\n                this.activityType = ActivityType.ShowEventActivity;\r\n                Log.d(\"AddEventAcitivity\", \"修改事件页面\");\r\n                MyEvent e = MyEventManager.getInstance().getMyEvent(eventID);\r\n                tempEvent.setmId(e.getmId());\r\n                mData = new LinkedList<>();\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_TYPE), e.getmTypeOfEvent().getmKind().getTypeName(), EventItem.TypeItem.item_type_1));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_TITLE), e.getmActivityTitle().getmTitle(), EventItem.TypeItem.item_type_2));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_STARTTIME), e.getmDateOfEvent().getDate(), EventItem.TypeItem.item_type_1, this));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_ENDTIME), new Date(e.getmDateOfEvent().getDate().getTime() + e.getmDateOfEvent().getDuration()), EventItem.TypeItem.item_type_1, this));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_HOST), e.getmHost(), EventItem.TypeItem.item_type_2));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_PARTICIPANT), e.getmParticipant().getmParticipant(), EventItem.TypeItem.item_type_2));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_PERVIOUSLOCATION), e.getmTargetLocation().getmCity(), EventItem.TypeItem.item_type_1));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_LOCATION), e.getmTargetLocation().getTargetName(), EventItem.TypeItem.item_type_1));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_PERIODICITY), e.getmPeriodicity().getmTypeOfPeriodicity().getTypeName(), EventItem.TypeItem.item_type_1));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EVENT_IMPORTANCE), e.getmImportance(), EventItem.TypeItem.item_type_3));\r\n\r\n                mData.add(new EventItem(this.getResources().getString(R.string.NOT_NECESSARY),\"\", EventItem.TypeItem.item_type_4));\r\n\r\n                mData.add(new EventItem(this.getResources().getString(R.string.MINIMUM_DURATION), \"--小时--分钟\", EventItem.TypeItem.item_type_1));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.EARLIEST_START_TIME), new Date(0), EventItem.TypeItem.item_type_1, this));\r\n                mData.add(new EventItem(this.getResources().getString(R.string.LATEST_END_TIME), new Date(0), EventItem.TypeItem.item_type_1, this));\r\n\r\n\r\n                mCalendar = tempEvent.getmDateOfEvent().getCalendar();\r\n\r\n            }\r\n        }catch (Exception e) {\r\n\r\n        }\r\n\r\n        // 初始化界面\r\n        initUI();\r\n\r\n        // 开始地理定位\r\n//        startService(new Intent(getApplicationContext(), LocationService.class));\r\n\r\n        // 注册广播\r\n        myReceiver = new MyReceiver();\r\n        IntentFilter filter = new IntentFilter();\r\n        filter.addAction(\"com.xiaobo.locationservice\");\r\n        registerReceiver(myReceiver, filter);\r\n    }\r\n\r\n    // 初始化界面\r\n    private void initUI() {\r\n        itemListView = findViewById(R.id.add_event_listview);\r\n        if (this.activityType == ActivityType.AddEventActivity) {\r\n            setData();\r\n        }\r\n        mAddEventAdapter = new AddEventAdapter(this, mData);\r\n        itemListView.setAdapter(mAddEventAdapter);\r\n        itemListView.setOnItemClickListener(this);\r\n\r\n        try {\r\n            String city = CurrentLocation.getInstance().getCity();\r\n            setAddress(city);\r\n            mStartPoint = new LatLonPoint(CurrentLocation.getInstance().getLatitude(), CurrentLocation.getInstance().getLongitude());\r\n            setPerEventLocation(mDate);\r\n            Log.d(\"AddEventActivity\", \"当前城市为\" + city);\r\n        }\r\n        catch (Exception e) {\r\n            Log.e(\"AddEventActivity\", \"获取本地地理信息错误\" + e);\r\n        }\r\n    }\r\n\r\n    // 获取上一事件地址\r\n    private void setPerEventLocation(Date date) {\r\n        try {\r\n            // tempEvent需要写入日期信息\r\n            Date sT = mData.get(2).getItemDate();\r\n            Date eT = mData.get(3).getItemDate();\r\n            DateOfEvent dateOfEvent = new DateOfEvent(sT, eT, mCalendar);\r\n            tempEvent.setmDateOfEvent(dateOfEvent);\r\n            perTargetLocation = MyEventManager.getInstance().getRecentEvent(tempEvent).getmTargetLocation();\r\n            Log.d(\"AddEventActivity\", \"上一事件的地址信息\" + perTargetLocation.describeLocation());\r\n            LatLonPoint perEventPoint = CurrentLocation.getInstance().existStartPoint(tempEvent);\r\n            mStartPoint = (perEventPoint != null) ? perEventPoint : mStartPoint;\r\n        }\r\n        catch (Exception e) {\r\n            Log.e(\"AddEventActivity\", \"获取上一事件地理信息错误\" + e);\r\n        }\r\n    }\r\n\r\n    // 设置表格数据\r\n    private void setData() {\r\n        mData = new LinkedList<>();\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_TYPE), this.getResources().getString(R.string.EVENT_TYPE), EventItem.TypeItem.item_type_1));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_TITLE), this.getResources().getString(R.string.EVENT_TITLE), EventItem.TypeItem.item_type_2));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_STARTTIME), mDate, EventItem.TypeItem.item_type_1, this));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_ENDTIME), new Date(mData.get(2).getItemDate().getTime() + 7200000), EventItem.TypeItem.item_type_1, this));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_HOST), \"张三\", EventItem.TypeItem.item_type_2));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_PARTICIPANT), \"李四\", EventItem.TypeItem.item_type_2));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_PERVIOUSLOCATION), \"定位中\", EventItem.TypeItem.item_type_1));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_LOCATION), \"目标地点\", EventItem.TypeItem.item_type_1));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_PERIODICITY), \"从不\", EventItem.TypeItem.item_type_1));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EVENT_IMPORTANCE), \"重要(单选框)\", EventItem.TypeItem.item_type_3));\r\n\r\n        mData.add(new EventItem(this.getResources().getString(R.string.NOT_NECESSARY),\"\", EventItem.TypeItem.item_type_4));\r\n\r\n        mData.add(new EventItem(this.getResources().getString(R.string.MINIMUM_DURATION), \"--小时--分钟\", EventItem.TypeItem.item_type_1));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.EARLIEST_START_TIME), new Date(0), EventItem.TypeItem.item_type_1, this));\r\n        mData.add(new EventItem(this.getResources().getString(R.string.LATEST_END_TIME), new Date(0), EventItem.TypeItem.item_type_1, this));\r\n\r\n//        mData.set(6, new EventItem(this.getResources().getString(R.string.EVENT_PERVIOUSLOCATION), mAddress, EventItem.TypeItem.item_type_1));\r\n\r\n        Calendar tempCal = Calendar.getInstance();\r\n        tempCal.setTime(mDate);\r\n        int year = tempCal.get(Calendar.YEAR);\r\n        int month = tempCal.get(Calendar.MARCH) + 1;\r\n        int day = tempCal.get(Calendar.DATE);\r\n        mCalendar.setYear(year);\r\n        mCalendar.setMonth(month);\r\n        mCalendar.setDay(day);\r\n    }\r\n\r\n    // 点击事件\r\n    @Override\r\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n        Log.d(\"AddEventActivity\", \"点击了第\" + position + \"项\");\r\n\r\n        switch (position) {\r\n            case 0:\r\n                // 事件类型\r\n                showSingleElectionAlert(0, TypeOfEvent.Kind.KindStrings());\r\n                break;\r\n            case 1:\r\n                // 事件名称\r\n                break;\r\n            case 2:\r\n                // 事件开始时间\r\n                showTimePickerView(new Date(), 2);\r\n                break;\r\n            case 3:\r\n                // 事件结束时间\r\n                showTimePickerView(new Date(System.currentTimeMillis() + 7200000), 3);\r\n                break;\r\n            case 4:\r\n                break;\r\n            case 5:\r\n                break;\r\n            case 6:\r\n                // 事件开始地点\r\n\r\n                break;\r\n            case 7:\r\n                // 事件目标地点\r\n                Intent i = new Intent(this, PoiSearchWithoutMapActivity.class);\r\n                // 传递一些数据\r\n                Bundle bundleInfo = new Bundle();\r\n\r\n                i.putExtras(bundleInfo);\r\n                startActivityForResult(i, POISEARCHACTIVITY_REQUEST);\r\n                break;\r\n            case 8:\r\n                // 周期性\r\n                showSingleElectionAlert(8, Periodicity.TypeOfPeriodicity.TypesOfPeriodicityStrings());\r\n                break;\r\n            case 9:\r\n                break;\r\n            case 10:\r\n                break;\r\n            case 11:\r\n                // 最短持续时间\r\n                TimePickerDialog timePickerDialog = new TimePickerDialog(AddEventActivity.this, AlertDialog.THEME_HOLO_LIGHT, new TimePickerDialog.OnTimeSetListener() {\r\n                    @Override\r\n                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {\r\n                        mData.set(11, new EventItem(\"最短持续时间\", String.format(\"%02d\", hourOfDay) + \"小时\" + String.format(\"%02d\", minute) + \"分钟\", EventItem.TypeItem.item_type_1));\r\n                        mData.get(11).setMinimumduration(hourOfDay*60*60*1000 + minute*60*1000);\r\n                        refresh();\r\n                    }\r\n                }, 0, 0, true);\r\n                timePickerDialog.show();\r\n                break;\r\n            case 12:\r\n                // 最早开始时间\r\n                if (mData.get(12).getItemDate().compareTo(new Date(0)) == 0) {\r\n                    showTimePickerView(mData.get(2).getItemDate(), 12);\r\n                }\r\n                else {\r\n                    showTimePickerView(mData.get(12).getItemDate(), 12);\r\n                }\r\n                break;\r\n            case 13:\r\n                // 最晚结束时间\r\n                if (mData.get(13).getItemDate().compareTo(new Date(0)) == 0) {\r\n                    showTimePickerView(mData.get(3).getItemDate(), 13);\r\n                }\r\n                else {\r\n                    showTimePickerView(mData.get(13).getItemDate(), 13);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    // 刷新列表\r\n    private void refresh() {\r\n        setPerEventLocation(mDate);\r\n        mAddEventAdapter.notifyDataSetChanged();\r\n    }\r\n\r\n    // 确认按钮\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.save_menu, menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n    }\r\n    // 确认按钮点击事件\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            case R.id.menu_item_new_event:\r\n                Log.d(\"AddEventActivity\", \"点击了保存确认按钮\");\r\n//                MyEventManager.getInstance().addMyEventToTable();\r\n                // 类型\r\n                TypeOfEvent type = new TypeOfEvent(TypeOfEvent.Kind.getTypeFromName(mData.get(0).getItemDetail()));\r\n                // 标题\r\n                ActivityTitle title = new ActivityTitle(mData.get(1).getItemDetail());\r\n                // 时间\r\n                Date sT = mData.get(2).getItemDate();\r\n                Date eT = mData.get(3).getItemDate();\r\n                Calendar tempCal = Calendar.getInstance();\r\n                tempCal.setTime(sT);\r\n                int year = tempCal.get(Calendar.YEAR);\r\n                int month = tempCal.get(Calendar.MARCH) + 1;\r\n                int day = tempCal.get(Calendar.DATE);\r\n                mCalendar.setYear(year);\r\n                mCalendar.setMonth(month);\r\n                mCalendar.setDay(day);\r\n                DateOfEvent dateOfEvent = new DateOfEvent(sT, eT, mCalendar);\r\n                // 主持人\r\n                String host = mData.get(4).getItemDetail();\r\n                // 参与者\r\n                Participant participant = new Participant(mData.get(5).getItemDetail());\r\n                // 周期性\r\n                Periodicity periodicity = new Periodicity(Periodicity.TypeOfPeriodicity.getTypeFromStr(mData.get(8).getItemDetail()));\r\n\r\n                // 地址\r\n                TargetLocation location = new TargetLocation(mTargetPoint, mTargetName);\r\n\r\n                tempEvent.setmTypeOfEvent(type);\r\n                tempEvent.setmActivityTitle(title);\r\n                tempEvent.setmTargetLocation(location);\r\n                tempEvent.setmDateOfEvent(dateOfEvent);\r\n                tempEvent.setmParticipant(participant);\r\n                tempEvent.setmPeriodicity(periodicity);\r\n                tempEvent.setmHost(host);\r\n\r\n                tempEvent.setCompleteEdit(true);\r\n\r\n\r\n\r\n                if (!sendCalRoute) {\r\n                    calRoute(mStartPoint, mTargetPoint, tempEvent.getmId());\r\n                }\r\n                if (this.activityType == ActivityType.ShowEventActivity) {\r\n                    Log.d(\"AddEventActivity\", \"确定按钮 修改事件\");\r\n                    Log.d(\"AddEventActivity\", tempEvent.describeMyEvent());\r\n                    MyEventManager.getInstance().resetMyEvent(tempEvent.getmId(), tempEvent);\r\n                }\r\n                if (tempEvent.isCompleteCalDriveRoute()) {\r\n                    Intent i = HttpRequestIntentService.newIntent(AddEventActivity.this);\r\n                    if (activityType == ActivityType.ShowEventActivity) {\r\n                        Log.d(\"AddEventActivity\", \"准备修改事件\");\r\n                        Bundle httpBundle = new Bundle();\r\n                        httpBundle.putString(\"REQUEST_TYPE\", String.valueOf(PublicVaribale.RequestType.REVISE_EVENT));\r\n                        httpBundle.putString(\"EVENT_ID\", String.valueOf(tempEvent.getmId()));\r\n                        i.putExtras(httpBundle);\r\n                    }\r\n                    else {\r\n                        if (tempEvent.isCompleteEdit() && tempEvent.isCompleteCalDriveRoute()) {\r\n                            TempEventManager.getInstance().saveEvents();\r\n                        }\r\n                        Log.d(\"AddEventActivity\", \"准备上传事件\");\r\n                        Bundle httpBundle = new Bundle();\r\n                        httpBundle.putString(\"REQUEST_TYPE\", String.valueOf(PublicVaribale.RequestType.UP_EVENT));\r\n                        httpBundle.putString(\"EVENT_ID\", String.valueOf(tempEvent.getmId()));\r\n                        i.putExtras(httpBundle);\r\n                    }\r\n                    startService(i);\r\n                    // 检测冲突\r\n//                    MyEvent event = MyEventManager.getInstance().getMyEvent(tempEvent.getmId());\r\n//                    List<MyTemporalInconsistency> myTemporalInconsistencyList = MyTemporalInconsistencyManager.getInstance().conflictDetectionWithEvent(event);\r\n//                    if (myTemporalInconsistencyList.size() > 0) {\r\n//                        for (MyTemporalInconsistency myIncon : myTemporalInconsistencyList) {\r\n//                            Log.d(\"AddEventActivity\", \"当前事件\" + tempEvent.getmId() + \"有冲突 准备上传\");\r\n//                            Intent incon = HttpRequestIntentService.newIntent(AddEventActivity.this);\r\n//                            Bundle inconBundle = new Bundle();\r\n//                            inconBundle.putString(\"REQUEST_TYPE\", String.valueOf(PublicVaribale.RequestType.UP_INCON));\r\n//                            inconBundle.putString(\"INCON_ID\", String.valueOf(myIncon.getmID()));\r\n//                            incon.putExtras(inconBundle);\r\n//                            startService(incon);\r\n//                        }\r\n//                    }\r\n                }\r\n\r\n                // 应该等到计算完路径后再修改编辑状态\r\n//                TempEventManager.getInstance().setCompleteEdit(tempEvent);\r\n\r\n                // 结束当前activity\r\n                this.finish();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n    //保存editText中的数据\r\n    public void saveEditData(int position, String str) {\r\n        Log.d(\"SmartCalendar\", \"编辑了第\" + position + \"项, 内容:\" + str);\r\n\r\n        mData.set(position, new EventItem(mData.get(position).getItemTitle(), str, EventItem.TypeItem.item_type_2));\r\n    }\r\n\r\n    // 保存CheckBox中的数据\r\n    public void saveCheckBoxData(int position, Boolean checked) {\r\n        String str = null;\r\n        Boolean isImportant = false;\r\n        if (checked) {\r\n            str = \"被选中\";\r\n            isImportant = true;\r\n        }\r\n        else {\r\n            str = \"未被选中\";\r\n            isImportant = false;\r\n        }\r\n\r\n//        thisEventIsImportant = checked;\r\n\r\n        mData.set(position, new EventItem(mData.get(position).getItemTitle(), isImportant, EventItem.TypeItem.item_type_3));\r\n    }\r\n\r\n    // 获取广播数据\r\n    private class MyReceiver extends BroadcastReceiver {\r\n\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            Bundle bundle = intent.getExtras();\r\n            String city = bundle.getString(\"city\");\r\n            String latitude = bundle.getString(\"latitude\");\r\n            String longitude = bundle.getString(\"longitude\");\r\n//            setAddress(city);\r\n            Log.d(\"AddEventAcitvity\", \"接受到广播city\" + city);\r\n        }\r\n    }\r\n    private void setAddress(String address) {\r\n        mData.set(6, new EventItem(this.getResources().getString(R.string.EVENT_PERVIOUSLOCATION), address, EventItem.TypeItem.item_type_1));\r\n        refresh();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        // 停止定位服务\r\n        stopService(new Intent(getApplicationContext(), LocationService.class));\r\n        // 注销广播\r\n        unregisterReceiver(myReceiver);\r\n    }\r\n\r\n    // 单选alert\r\n    private void showSingleElectionAlert(int index, String[] mArray) {\r\n        EventItem eventItem = mData.get(index);\r\n        if (mArray.length > 0) {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(AddEventActivity.this);\r\n            builder.setTitle(eventItem.getItemTitle());\r\n\r\n            builder.setSingleChoiceItems(mArray, eventItem.getCheckedItem(), new DialogInterface.OnClickListener() {\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    dialog.dismiss();\r\n                    mData.set(index, new EventItem(eventItem.getItemTitle(), mArray[which], eventItem.itemType));\r\n                    mData.get(index).setCheckedItem(which);\r\n\r\n                    refresh();\r\n                }\r\n            });\r\n            builder.show();\r\n        }\r\n    }\r\n\r\n    // 时间选择器\r\n    private void showTimePickerView(Date oldDate, int selectedItem) {\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.setTime(oldDate);\r\n        TimePickerView pvTime = new TimePickerBuilder(AddEventActivity.this, new OnTimeSelectListener() {\r\n            @Override\r\n            public void onTimeSelect(Date date, View v) {\r\n                // 去掉秒数\r\n                date = new Date(date.getTime() / 100000 * 100000);\r\n                Log.d(\"时间选择器\", \"选择了时间\" + date.getTime());\r\n                mData.set(selectedItem, new EventItem(mData.get(selectedItem).getItemTitle(), date, EventItem.TypeItem.item_type_1, AddEventActivity.this) );\r\n                switch (selectedItem) {\r\n                    case 2:\r\n\r\n//                        mData.set(12, new EventItem(mData.get(12).getItemTitle(), date, EventItem.TypeItem.item_type_1, AddEventActivity.this));\r\n\r\n//                        MyEvent perEvent = MyEventManager.get().getRecentEvent(date, mCalendar, sTempEventManager.getCurrentEvent().getmId());\r\n//                        if (perEvent != null) {\r\n//                            startPoint = new LatLonPoint(perEvent.getmLocation().getEndPoint().getLatitude(), perEvent.getmLocation().getEndPoint().getLongitude());\r\n//                            mAddress = perEvent.getmLocation().getEndName();\r\n//                            mData.set(6, new EventItem(getResources().getString(R.string.EVENT_PERVIOUSLOCATION), mAddress, EventItem.TypeItem.item_type_1));\r\n//                        }\r\n\r\n                }\r\n                refresh();\r\n            }\r\n        })\r\n                .setType(new boolean[]{false, true, true, true, true, false})\r\n                .setOutSideCancelable(true)\r\n                .setCancelText(this.getResources().getString(R.string.CANCLE))\r\n                .setSubmitText(this.getResources().getString(R.string.DONE))\r\n                .setItemVisibleCount(5)\r\n                .setDate(calendar)\r\n                .isDialog(true)\r\n                .build();\r\n\r\n\r\n        pvTime.show();\r\n\r\n\r\n    }\r\n\r\n    // 计算通勤时间\r\n    private void calRoute(LatLonPoint startPoint, LatLonPoint endPoint, UUID uuid) {\r\n        Intent i = CalRouteIntentService.newIntent(this);\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(\"start_lat\", String.valueOf(startPoint.getLatitude()));\r\n        bundle.putString(\"start_lng\", String.valueOf(startPoint.getLongitude()));\r\n        bundle.putString(\"lat\", String.valueOf(endPoint.getLatitude()));\r\n        bundle.putString(\"lng\", String.valueOf(endPoint.getLongitude()));\r\n        bundle.putString(\"UUID\", String.valueOf(uuid));\r\n        i.putExtras(bundle);\r\n        startService(i);\r\n        sendCalRoute = true;\r\n    }\r\n\r\n    /**\r\n     * 从POI搜索页面返回数据\r\n     * @param requestCode\r\n     * @param resultCode\r\n     * @param data\r\n     */\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        switch (requestCode) {\r\n            case POISEARCHACTIVITY_REQUEST:\r\n                if (resultCode == POISEARCHACTIVITY_RESULT) {\r\n                    // 从POI搜索页面返回的数据\r\n                    Bundle bundle = data.getExtras();\r\n                    String lon = bundle.getString(\"lon\");\r\n                    String lat = bundle.getString(\"lat\");\r\n                    String title = bundle.getString(\"title\");\r\n                    String address = bundle.getString(\"address\");\r\n                    PoiInfoModel model = new PoiInfoModel(lon, lat, title, address);\r\n                    mData.set(7, new EventItem(this.getResources().getString(R.string.EVENT_LOCATION), model.getTitle(), EventItem.TypeItem.item_type_1));\r\n                    mTargetPoint = new LatLonPoint(Double.valueOf(lat), Double.valueOf(lon));\r\n                    mTargetName = String.valueOf(model.getTitle());\r\n\r\n                    // 加判断  如果事件地点和上一事件的地点相同  则不再计算通勤时间\r\n                    if (mTargetName.equals(perTargetLocation.getTargetName())) {\r\n                        Log.d(\"AddEventActivity\", \"事件地点与上一事件地点相同, 不再计算通勤时间, 直接设置为0\");\r\n                        TempEventManager.getInstance().setCommutingTime(tempEvent.getmId(), 0);\r\n//                        tempEvent.setCompleteCalDriveRoute(true);\r\n                    }\r\n                    else {\r\n                        // 计算通勤时间\r\n                        calRoute(mStartPoint, mTargetPoint, tempEvent.getmId());\r\n                    }\r\n                    sendCalRoute = true;\r\n                    Log.d(\"AddEventActivity\", \"修改计算通勤时间标识为:\" + sendCalRoute);\r\n                    refresh();\r\n                }\r\n                else {\r\n                    Log.e(\"AddEventActivity\", \"POI搜索页面没有正确的返回数据\");\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/xiaobo/smartcalendar/activity/AddEventActivity/AddEventActivity.java b/app/src/main/java/com/xiaobo/smartcalendar/activity/AddEventActivity/AddEventActivity.java
--- a/app/src/main/java/com/xiaobo/smartcalendar/activity/AddEventActivity/AddEventActivity.java	(revision 2a1d7e2ead0533311d8c7be546f8605070d4478d)
+++ b/app/src/main/java/com/xiaobo/smartcalendar/activity/AddEventActivity/AddEventActivity.java	(date 1665932417569)
@@ -169,6 +169,7 @@
     // 获取上一事件地址
     private void setPerEventLocation(Date date) {
         try {
+            Log.d("AddEventActivity", "获取上一事件地址");
             // tempEvent需要写入日期信息
             Date sT = mData.get(2).getItemDate();
             Date eT = mData.get(3).getItemDate();
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.xiaobo.smartcalendar\">\r\n    <!-- 权限设置 -->\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /> <!-- 用于访问GPS定位 -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /> <!-- 获取运营商信息，用于支持提供运营商信息相关的接口 -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> <!-- 用于访问wifi网络信息，wifi信息会用于进行网络定位 -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /> <!-- 这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位 -->\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" /> <!-- 用于访问网络，网络定位需要上网 -->\r\n    <uses-permission android:name=\"android.permission.INTERNET\" /> <!-- 用于读取手机当前的状态 -->\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /> <!-- 写入扩展存储，向扩展卡写入数据，用于写入缓存定位数据 -->\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /> <!-- 用于申请调用A-GPS模块 -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\" /> <!-- 用于申请获取蓝牙信息进行室内定位 -->\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:networkSecurityConfig=\"@xml/network_security_config\"\r\n        android:roundIcon=\"@drawable/calendar\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.SmartCalendar\">\r\n        <activity\r\n            android:name=\".activity.AdjustActivity.AdjustActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".activity.TestActivity.TableActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".activity.PoiSearchWithoutMap.PoiSearchWithoutMapActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".activity.SearchLocationActivity.InputTipsActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".activity.SearchLocationActivity.SearchLocationActivity\"\r\n            android:exported=\"true\" />\r\n        <activity android:name=\".activity.TestActivity.TestActivity\" />\r\n        <activity android:name=\".activity.SetingActivity.SetingActivity\" />\r\n        <activity android:name=\".activity.RegisterActivity.RegisterActivity\" />\r\n        <activity android:name=\".activity.LoginActivity.LoginActivity\" />\r\n        <activity android:name=\".activity.AddRuleActivity.AddRuleActivity\" />\r\n        <activity android:name=\".activity.AddEventActivity.AddEventActivity\" />\r\n        <activity android:name=\".MainActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity> <!-- 高德key -->\r\n        <!-- android:Desktopvalue =\"d36a9cb6b0113491dad0daa3582e6148\" -->\r\n        <!-- android:Yogavalue =\"c5131b2f39dc1ce9a7648ea657ceddbe\" -->\r\n        <meta-data\r\n            android:name=\"com.amap.api.v2.apikey\"\r\n            android:value=\"b30977c88ac77ee00d97ca2221f5a8df\" />\r\n\r\n        <service android:name=\".Service.BackgroundService.ReceivedBroadcastService\" />\r\n        <service android:name=\".Service.HttpRequest.HttpRequestIntentService\" />\r\n        <service android:name=\".Service.CalRoute.CalRouteIntentService\" />\r\n        <service android:name=\".Service.Location.LocationService\" />\r\n        <service android:name=\".Service.MainService.MainService\">\r\n            <intent-filter>\r\n                <action android:name=\"com.xiaobo.smartcalendar.mainservice\" />\r\n            </intent-filter>\r\n        </service>\r\n        <service android:name=\"com.amap.api.location.APSService\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 2a1d7e2ead0533311d8c7be546f8605070d4478d)
+++ b/app/src/main/AndroidManifest.xml	(date 1665929780227)
@@ -57,7 +57,7 @@
         <!-- android:Yogavalue ="c5131b2f39dc1ce9a7648ea657ceddbe" -->
         <meta-data
             android:name="com.amap.api.v2.apikey"
-            android:value="b30977c88ac77ee00d97ca2221f5a8df" />
+            android:value="d36a9cb6b0113491dad0daa3582e6148" />
 
         <service android:name=".Service.BackgroundService.ReceivedBroadcastService" />
         <service android:name=".Service.HttpRequest.HttpRequestIntentService" />
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Thu Apr 15 22:47:30 CST 2021\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.7.1-bin.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	(revision 2a1d7e2ead0533311d8c7be546f8605070d4478d)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1665929780245)
@@ -1,6 +1,6 @@
-#Thu Apr 15 22:47:30 CST 2021
+#Sat Oct 01 19:28:15 CST 2022
 distributionBase=GRADLE_USER_HOME
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.7.1-bin.zip
 distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.7.1-bin.zip
+zipStoreBase=GRADLE_USER_HOME
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"RemoteRepositoriesConfiguration\">\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"central\" />\r\n      <option name=\"name\" value=\"Maven Central repository\" />\r\n      <option name=\"url\" value=\"https://repo1.maven.org/maven2\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"jboss.community\" />\r\n      <option name=\"name\" value=\"JBoss Community repository\" />\r\n      <option name=\"url\" value=\"https://repository.jboss.org/nexus/content/repositories/public/\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"BintrayJCenter\" />\r\n      <option name=\"name\" value=\"BintrayJCenter\" />\r\n      <option name=\"url\" value=\"https://jcenter.bintray.com/\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"Google\" />\r\n      <option name=\"name\" value=\"Google\" />\r\n      <option name=\"url\" value=\"https://dl.google.com/dl/android/maven2/\" />\r\n    </remote-repository>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
--- a/.idea/jarRepositories.xml	(revision 2a1d7e2ead0533311d8c7be546f8605070d4478d)
+++ b/.idea/jarRepositories.xml	(date 1665929780249)
@@ -21,5 +21,10 @@
       <option name="name" value="Google" />
       <option name="url" value="https://dl.google.com/dl/android/maven2/" />
     </remote-repository>
+    <remote-repository>
+      <option name="id" value="maven" />
+      <option name="name" value="maven" />
+      <option name="url" value="https://maven.aliyun.com/repository/google/" />
+    </remote-repository>
   </component>
 </project>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.xiaobo.smartcalendar\"\r\n        minSdkVersion 26\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.1\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation 'androidx.appcompat:appcompat:1.1.0'\r\n    implementation 'com.google.android.material:material:1.1.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\r\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\r\n    testImplementation 'junit:junit:4.+'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\r\n\r\n    compileOnly 'org.projectlombok:lombok:1.18.16'\r\n    annotationProcessor 'org.projectlombok:lombok:1.18.16'\r\n    //noinspection GradleCompatible\r\n//    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n\r\n    // 首页日历\r\n    implementation 'com.haibin:calendarview:3.7.1'\r\n    // HTTP请求\r\n    implementation 'com.squareup.okhttp3:okhttp:3.11.0'\r\n    // 路径计算\r\n    implementation 'com.amap.api:search:latest.integration'\r\n    // 定位\r\n//    implementation 'com.amap.api:location:latest.integration'\r\n    // 地图\r\n    implementation 'com.amap.api:3dmap:latest.integration'\r\n    // JSON解析\r\n    implementation 'com.google.code.gson:gson:2.8.5'\r\n    // pickerview\r\n    implementation 'com.contrarywind:Android-PickerView:4.1.9'\r\n    // 权限请求\r\n    implementation 'com.yanzhenjie:permission:2.0.3'\r\n    // json格式化\r\n    implementation 'com.alibaba:fastjson:1.1.72.android'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 2a1d7e2ead0533311d8c7be546f8605070d4478d)
+++ b/app/build.gradle	(date 1665929780254)
@@ -14,6 +14,10 @@
         versionName "1.1"
 
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+
+        aaptOptions.cruncherEnabled = false
+        aaptOptions.useNewCruncher = false
+
     }
 
     buildTypes {
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app\"s APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Automatically convert third-party libraries to use AndroidX\r\nandroid.enableJetifier=true\r\n\r\n# used in OPPO findX\r\nandroid.injected.testOnly=false
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	(revision 2a1d7e2ead0533311d8c7be546f8605070d4478d)
+++ b/gradle.properties	(date 1665929780233)
@@ -6,11 +6,11 @@
 # http://www.gradle.org/docs/current/userguide/build_environment.html
 # Specifies the JVM arguments used for the daemon process.
 # The setting is particularly useful for tweaking memory settings.
-org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
+org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8
 # When configured, Gradle will run in incubating parallel mode.
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
-# org.gradle.parallel=true
+ org.gradle.parallel=true
 # AndroidX package structure to make it clearer which packages are bundled with the
 # Android operating system, and which are packaged with your app"s APK
 # https://developer.android.com/topic/libraries/support-library/androidx-rn
@@ -19,4 +19,7 @@
 android.enableJetifier=true
 
 # used in OPPO findX
-android.injected.testOnly=false
\ No newline at end of file
+android.injected.testOnly=false
+
+#Enable daemon
+org.gradle.daemon=true
\ No newline at end of file
Index: app/src/main/java/com/xiaobo/smartcalendar/activity/LoginActivity/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xiaobo.smartcalendar.activity.LoginActivity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.os.Looper;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.xiaobo.smartcalendar.Public.ProfileManager;\r\nimport com.xiaobo.smartcalendar.R;\r\nimport com.xiaobo.smartcalendar.activity.RegisterActivity.RegisterActivity;\r\n\r\nimport java.io.IOException;\r\n\r\nimport okhttp3.Call;\r\nimport okhttp3.Callback;\r\nimport okhttp3.FormBody;\r\nimport okhttp3.OkHttpClient;\r\nimport okhttp3.Request;\r\nimport okhttp3.RequestBody;\r\nimport okhttp3.Response;\r\n\r\nimport static com.xiaobo.smartcalendar.Public.PublicVaribale.LOGIN_SUCCESS;\r\nimport static com.xiaobo.smartcalendar.Public.PublicVaribale.LOGIN_URL;\r\n\r\npublic class LoginActivity extends AppCompatActivity {\r\n\r\n    EditText usernameEditText;\r\n    EditText passwordEditText;\r\n    Button loginButton;\r\n    Button forgetPosswordButton;\r\n    Button registerButton;\r\n\r\n    String username;\r\n    String password;\r\n\r\n    String token;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        Intent i = getIntent();\r\n        Bundle userInfo = i.getExtras();\r\n        if (userInfo != null) {\r\n            try {\r\n                username = userInfo.getString(\"username\");\r\n                password = userInfo.getString(\"password\");\r\n            }\r\n            catch (Exception e) {\r\n                Log.e(\"LoginActivity\", \"获取用户信息错误\");\r\n            }\r\n        }\r\n\r\n        token = ProfileManager.get(getApplicationContext()).getToken();\r\n\r\n        usernameEditText = findViewById(R.id.username_login);\r\n        passwordEditText = findViewById(R.id.password_login);\r\n        loginButton = findViewById(R.id.button_login);\r\n        forgetPosswordButton = findViewById(R.id.button_forget_password);\r\n        registerButton = findViewById(R.id.button_register_on_loginactivity);\r\n\r\n        usernameEditText.setText(\"username001\");\r\n        passwordEditText.setText(\"123456\");\r\n\r\n        if (!(username == null)) {\r\n            usernameEditText.setText(username);\r\n        }\r\n        if (!(password == null)) {\r\n            passwordEditText.setText(password);\r\n        }\r\n\r\n        username = usernameEditText.getText().toString();\r\n        password = passwordEditText.getText().toString();\r\n\r\n        loginButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Log.d(\"LoginActivity\", \"用户点击了登录按钮\");\r\n                if (usernameEditText.toString().length() == 0 || passwordEditText.toString().length() == 0) {\r\n                    Toast.makeText(LoginActivity.this, \"用户名或密码不能为空\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                else {\r\n                    String login_username = usernameEditText.getText().toString();\r\n                    String login_password = passwordEditText.getText().toString();\r\n                    String request = UserLogin(LOGIN_URL, login_username, login_password);\r\n                }\r\n            }\r\n        });\r\n\r\n        forgetPosswordButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Log.d(\"LoginActivity\", \"用户点击了忘记密码按钮\");\r\n            }\r\n        });\r\n\r\n        registerButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Log.d(\"LoginActivity\", \"用户点击了注册按钮\");\r\n                Intent i = new Intent(LoginActivity.this, RegisterActivity.class);\r\n                i.putExtra(\"username\", usernameEditText.getText().toString());\r\n                startActivityForResult(i, 1003);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void AfterLogin(String request) {\r\n        // 存储token\r\n        ProfileManager.get(getApplicationContext()).setToken(token);\r\n        Looper.prepare();\r\n        Toast.makeText(LoginActivity.this, request, Toast.LENGTH_SHORT).show();\r\n        Looper.loop();\r\n    }\r\n\r\n    /**\r\n     * 登录\r\n     * @param url       URL\r\n     * @param username  用户名\r\n     * @param password  密码\r\n     * @return\r\n     */\r\n    private String UserLogin(String url, String username, String password) {\r\n        String action = \"login\";\r\n        String login_mode = \"login_verify_use_password\";\r\n        final StringBuffer state = new StringBuffer();\r\n\r\n        OkHttpClient client = new OkHttpClient();\r\n        RequestBody requestBody = new FormBody.Builder()\r\n                .add(\"action\", action)\r\n                .add(\"login_mode\", login_mode)\r\n                .add(\"username\", username)\r\n                .add(\"password\", password)\r\n                .build();\r\n\r\n        // 不弄成数组的话  会报错\r\n        final LoginModel[] model = {null};\r\n\r\n        final Request request = new Request.Builder()\r\n                .url(url)\r\n                .post(requestBody)\r\n                .build();\r\n        Call call = client.newCall(request);;\r\n        call.enqueue(new Callback() {\r\n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                Log.e(\"用户登陆失败\", e.toString());\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n                String result= response.body().string();\r\n                Gson gson = new Gson();\r\n                model[0] = gson.fromJson(result, LoginModel.class);\r\n                if (response.isSuccessful()) {\r\n                    Log.d(\"登陆成功\", \"response ----->\" + result);\r\n                    state.append(\"josn请求码 -> \" + response.code() + \"\\n\");\r\n                    state.append(\"登陆返回结果 ->\" + model[0].getMsg() + \"\\n\");\r\n                    token = model[0].getToken();\r\n                    // 存储token\r\n                    ProfileManager.get(getApplicationContext()).setToken(token);\r\n\r\n                    String state = LOGIN_SUCCESS;\r\n                    // 登陆成功发出广播\r\n                    sendMessage(result, state);\r\n\r\n                    finish();\r\n                }\r\n                else {\r\n                    Log.e(\"登陆错误 -> \", result);\r\n                    state.append(model[0].getMsg());\r\n                }\r\n                AfterLogin(model[0].getMsg());\r\n            }\r\n        });\r\n\r\n        return state.toString();\r\n    }\r\n\r\n    // 发送通知 发送接收到的信息\r\n    private void sendMessage(String str, String state) {\r\n        Intent i = new Intent();\r\n        i.setAction(\"com.login_state\");\r\n        i.putExtra(\"massage\", str);\r\n        i.putExtra(\"state\", state);\r\n\r\n        this.sendBroadcast(i);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/xiaobo/smartcalendar/activity/LoginActivity/LoginActivity.java b/app/src/main/java/com/xiaobo/smartcalendar/activity/LoginActivity/LoginActivity.java
--- a/app/src/main/java/com/xiaobo/smartcalendar/activity/LoginActivity/LoginActivity.java	(revision 2a1d7e2ead0533311d8c7be546f8605070d4478d)
+++ b/app/src/main/java/com/xiaobo/smartcalendar/activity/LoginActivity/LoginActivity.java	(date 1665929780238)
@@ -84,6 +84,7 @@
             @Override
             public void onClick(View view) {
                 Log.d("LoginActivity", "用户点击了登录按钮");
+                Log.d("LoginActivity", "username is " + username + ", password is " + password);
                 if (usernameEditText.toString().length() == 0 || passwordEditText.toString().length() == 0) {
                     Toast.makeText(LoginActivity.this, "用户名或密码不能为空", Toast.LENGTH_SHORT).show();
                 }
